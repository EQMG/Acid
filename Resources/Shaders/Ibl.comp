#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(binding = 0, rgba8) uniform writeonly image2D outColour;

layout(binding = 1) uniform samplerCube samplerColour;

#include "Shaders/Lighting.glsl"

const float roughness = 0.6f;

void main()
{
	vec2 uv = gl_GlobalInvocationID.xy / vec2(WIDTH, HEIGHT);

	for (uint i = 0; i != 6; ++i)
	{
		vec3 localDir = normalize(cube_dir(uv, i));
		vec3 conv = vec3(0.0f);

		if (roughness <= 0.0f)
		{
			conv = texture(samplerColour, localDir).rgb;
		}
		else if (roughness >= 1.0f)
		{
			conv = diffuse_convolution(samplerColour, localDir);
		}
		else
		{
			conv = specular_convolution(samplerColour, localDir, roughness);
		}

		imageStore(outColour, ivec2(gl_GlobalInvocationID.xy) + ivec2(0, HEIGHT * i), vec4(conv, 1.0f));
	}
}
